/**
 ******************************************************************************
 * Xenia : Xbox 360 Emulator Research Project                                 *
 ******************************************************************************
 * Copyright 2022 Ben Vanik. All rights reserved.                             *
 * Released under the BSD license - see LICENSE in the root for more details. *
 ******************************************************************************
 */

#include "endian.xesli"
#define XE_RESOLVE_SOURCE_TYPE uint4_xe
#include "resolve.xesli"

array_buffer_wo_declare_xe(uint4_xe, xe_resolve_dest, set=1, binding=0, u0,
                           space0)
#define LOCAL_SIZE_X_XE 8
#define LOCAL_SIZE_Y_XE 8
#define LOCAL_SIZE_Z_XE 1
entry_bindings_begin_compute_xe
  XE_RESOLVE_PUSH_CONST_BINDING
  entry_binding_next_xe
  array_buffer_wo_binding_xe(uint4_xe, xe_resolve_dest, buffer(1))
  entry_binding_next_xe
  XE_RESOLVE_COPY_EDRAM_BINDING
entry_bindings_end_inputs_begin_compute_xe
  entry_in_global_thread_id_xe
entry_inputs_end_code_begin_compute_xe
{
  // 1 thread = 8 host pixels.
  XeResolveInfo resolve_info = XeResolveGetInfo(pass_push_consts_xe);
  // Group height can't cross resolve granularity, Y overflow check not needed.
  dont_flatten_xe
  if (in_global_thread_id_xe.x >= resolve_info.width_div_8_scaled) {
    return;
  }
  uint2_xe pixel_index = in_global_thread_id_xe.xy << uint2_xe(3u, 0u);
  uint source_address_int4s =
      XeEdramOffsetInts(
          uint2_xe(pixel_index.x,
                   max(pixel_index.y,
                       resolve_info.half_pixel_offset_fill_source.y)) +
              resolve_info.edram_offset_scaled,
          resolve_info.edram_base_tiles, true, resolve_info.edram_pitch_tiles,
          resolve_info.edram_msaa_samples, resolve_info.edram_is_depth, 0u,
          XeResolveFirstSampleIndex(resolve_info.sample_select),
          resolve_info.resolution_scale)
      >> 2u;
  uint4_xe pixels_0123 =
      array_buffer_load_xe(xe_resolve_edram, source_address_int4s);
  uint4_xe pixels_4567 =
      array_buffer_load_xe(xe_resolve_edram, source_address_int4s + 1u);
  dont_flatten_xe
  if (pixel_index.x == 0u &&
      resolve_info.half_pixel_offset_fill_source.x != 0u) {
    if (resolve_info.half_pixel_offset_fill_source.x >= 2u) {
      if (resolve_info.half_pixel_offset_fill_source.x >= 3u) {
        pixels_0123.z = pixels_0123.w;
      }
      pixels_0123.y = pixels_0123.z;
    }
    pixels_0123.x = pixels_0123.y;
  }
  XeResolveSwap8PixelsRedBlue32bpp(resolve_info, pixels_0123, pixels_4567);
  uint dest_address =
      XeResolveDestPixelAddress(resolve_info, pixel_index, 2u) >> 4u;
  array_buffer_store_xe(
      xe_resolve_dest, dest_address,
      XeEndianSwap32(pixels_0123, resolve_info.dest_endian_128));
  dest_address += XeResolveDestRightConsecutiveBlocksOffset(
                      pixel_index.x, 2u, resolve_info.resolution_scale) >> 4u;
  array_buffer_store_xe(
      xe_resolve_dest, dest_address,
      XeEndianSwap32(pixels_4567, resolve_info.dest_endian_128));
}
entry_code_end_compute_xe
